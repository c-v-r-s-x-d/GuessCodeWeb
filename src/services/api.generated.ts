//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param userId (optional) 
     * @return Success
     */
    ban(userId: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/administration/ban?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBan(_response);
        });
    }

    protected processBan(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param userId (optional) 
     * @return Success
     */
    unban(userId: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/administration/unban?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUnban(_response);
        });
    }

    protected processUnban(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    role(body: ChangeUserRoleDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/administration/role";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRole(_response);
        });
    }

    protected processRole(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginDto | undefined): Promise<TokenDto> {
        let url_ = this.baseUrl + "/api/auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<TokenDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TokenDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TokenDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    register(body: RegisterDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param secondUserId (optional) 
     * @return Success
     */
    chat(secondUserId: number | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/chat?";
        if (secondUserId === null)
            throw new Error("The parameter 'secondUserId' cannot be null.");
        else if (secondUserId !== undefined)
            url_ += "secondUserId=" + encodeURIComponent("" + secondUserId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChat(_response);
        });
    }

    protected processChat(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param uploadInStaticFolder (optional) 
     * @param file (optional) 
     * @return Success
     */
    file(uploadInStaticFolder: boolean | undefined, file: FileParameter | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/file?";
        if (uploadInStaticFolder === null)
            throw new Error("The parameter 'uploadInStaticFolder' cannot be null.");
        else if (uploadInStaticFolder !== undefined)
            url_ += "uploadInStaticFolder=" + encodeURIComponent("" + uploadInStaticFolder) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFile(_response);
        });
    }

    protected processFile(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param kataDtoRaw (optional) 
     * @param file (optional) 
     * @return Success
     */
    kataAdministrationPOST(kataDtoRaw: string | undefined, file: FileParameter | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/kata-administration";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (kataDtoRaw === null || kataDtoRaw === undefined)
            throw new Error("The parameter 'kataDtoRaw' cannot be null.");
        else
            content_.append("kataDtoRaw", kataDtoRaw.toString());
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processKataAdministrationPOST(_response);
        });
    }

    protected processKataAdministrationPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    kataAdministrationPUT(body: KataDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/kata-administration";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processKataAdministrationPUT(_response);
        });
    }

    protected processKataAdministrationPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param kataId (optional) 
     * @return Success
     */
    kataAdministrationDELETE(kataId: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/kata-administration?";
        if (kataId === null)
            throw new Error("The parameter 'kataId' cannot be null.");
        else if (kataId !== undefined)
            url_ += "kataId=" + encodeURIComponent("" + kataId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processKataAdministrationDELETE(_response);
        });
    }

    protected processKataAdministrationDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    pendingKatasAll(): Promise<KataDto[]> {
        let url_ = this.baseUrl + "/api/kata-administration/pending-katas";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPendingKatasAll(_response);
        });
    }

    protected processPendingKatasAll(response: Response): Promise<KataDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(KataDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<KataDto[]>(null as any);
    }

    /**
     * @param kataId (optional) 
     * @param isApproved (optional) 
     * @return Success
     */
    pendingKatas(kataId: number | undefined, isApproved: boolean | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/kata-administration/pending-katas?";
        if (kataId === null)
            throw new Error("The parameter 'kataId' cannot be null.");
        else if (kataId !== undefined)
            url_ += "kataId=" + encodeURIComponent("" + kataId) + "&";
        if (isApproved === null)
            throw new Error("The parameter 'isApproved' cannot be null.");
        else if (isApproved !== undefined)
            url_ += "isApproved=" + encodeURIComponent("" + isApproved) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPendingKatas(_response);
        });
    }

    protected processPendingKatas(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    kataSearch(kataId: number): Promise<KataDto> {
        let url_ = this.baseUrl + "/api/kata-search/{kataId}";
        if (kataId === undefined || kataId === null)
            throw new Error("The parameter 'kataId' must be defined.");
        url_ = url_.replace("{kataId}", encodeURIComponent("" + kataId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processKataSearch(_response);
        });
    }

    protected processKataSearch(response: Response): Promise<KataDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = KataDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<KataDto>(null as any);
    }

    /**
     * @param kataLanguage (optional) 
     * @param kataType (optional) 
     * @param kataDifficulty (optional) 
     * @return Success
     */
    kataSearchAll(kataLanguage: ProgrammingLanguage | undefined, kataType: KataType | undefined, kataDifficulty: KataDifficulty | undefined): Promise<KataDto[]> {
        let url_ = this.baseUrl + "/api/kata-search?";
        if (kataLanguage === null)
            throw new Error("The parameter 'kataLanguage' cannot be null.");
        else if (kataLanguage !== undefined)
            url_ += "kataLanguage=" + encodeURIComponent("" + kataLanguage) + "&";
        if (kataType === null)
            throw new Error("The parameter 'kataType' cannot be null.");
        else if (kataType !== undefined)
            url_ += "kataType=" + encodeURIComponent("" + kataType) + "&";
        if (kataDifficulty === null)
            throw new Error("The parameter 'kataDifficulty' cannot be null.");
        else if (kataDifficulty !== undefined)
            url_ += "kataDifficulty=" + encodeURIComponent("" + kataDifficulty) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processKataSearchAll(_response);
        });
    }

    protected processKataSearchAll(response: Response): Promise<KataDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(KataDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<KataDto[]>(null as any);
    }

    /**
     * @return Success
     */
    resolvedAll(): Promise<number[]> {
        let url_ = this.baseUrl + "/api/kata-search/resolved";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processResolvedAll(_response);
        });
    }

    protected processResolvedAll(response: Response): Promise<number[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number[]>(null as any);
    }

    /**
     * @return Success
     */
    resolved(kataId: number): Promise<ResolvedKataDto> {
        let url_ = this.baseUrl + "/api/kata-search/resolved/{kataId}";
        if (kataId === undefined || kataId === null)
            throw new Error("The parameter 'kataId' must be defined.");
        url_ = url_.replace("{kataId}", encodeURIComponent("" + kataId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processResolved(_response);
        });
    }

    protected processResolved(response: Response): Promise<ResolvedKataDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResolvedKataDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResolvedKataDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    codeReading(body: KataCodeReadingAnswerDto | undefined): Promise<KataCodeReadingSolveResultDto> {
        let url_ = this.baseUrl + "/api/kata-solve/code-reading";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCodeReading(_response);
        });
    }

    protected processCodeReading(response: Response): Promise<KataCodeReadingSolveResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = KataCodeReadingSolveResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<KataCodeReadingSolveResultDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    bugFinding(body: KataBugFindingAnswerDto | undefined): Promise<KataBugFindingSolveResultDto> {
        let url_ = this.baseUrl + "/api/kata-solve/bug-finding";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBugFinding(_response);
        });
    }

    protected processBugFinding(response: Response): Promise<KataBugFindingSolveResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = KataBugFindingSolveResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<KataBugFindingSolveResultDto>(null as any);
    }

    /**
     * @return Success
     */
    leaderboard(): Promise<LeaderboardPositionDto[]> {
        let url_ = this.baseUrl + "/api/leaderboard";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLeaderboard(_response);
        });
    }

    protected processLeaderboard(response: Response): Promise<LeaderboardPositionDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LeaderboardPositionDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LeaderboardPositionDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    mentoring(body: ProgrammingLanguage[] | undefined): Promise<MentorDto[]> {
        let url_ = this.baseUrl + "/api/mentoring";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMentoring(_response);
        });
    }

    protected processMentoring(response: Response): Promise<MentorDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MentorDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MentorDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    mentorship(body: MentorDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/mentoring/mentorship";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMentorship(_response);
        });
    }

    protected processMentorship(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param mentorId (optional) 
     * @return Success
     */
    mentorRequest(mentorId: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/mentoring/mentor-request?";
        if (mentorId === null)
            throw new Error("The parameter 'mentorId' cannot be null.");
        else if (mentorId !== undefined)
            url_ += "mentorId=" + encodeURIComponent("" + mentorId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMentorRequest(_response);
        });
    }

    protected processMentorRequest(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    pendingMentorsAll(): Promise<MentorDto[]> {
        let url_ = this.baseUrl + "/api/mentoring/pending-mentors";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPendingMentorsAll(_response);
        });
    }

    protected processPendingMentorsAll(response: Response): Promise<MentorDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MentorDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MentorDto[]>(null as any);
    }

    /**
     * @param mentorId (optional) 
     * @param isApproved (optional) 
     * @return Success
     */
    pendingMentors(mentorId: number | undefined, isApproved: boolean | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/mentoring/pending-mentors?";
        if (mentorId === null)
            throw new Error("The parameter 'mentorId' cannot be null.");
        else if (mentorId !== undefined)
            url_ += "mentorId=" + encodeURIComponent("" + mentorId) + "&";
        if (isApproved === null)
            throw new Error("The parameter 'isApproved' cannot be null.");
        else if (isApproved !== undefined)
            url_ += "isApproved=" + encodeURIComponent("" + isApproved) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPendingMentors(_response);
        });
    }

    protected processPendingMentors(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    mentees(): Promise<UserDto[]> {
        let url_ = this.baseUrl + "/api/mentoring/mentees";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMentees(_response);
        });
    }

    protected processMentees(response: Response): Promise<UserDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDto[]>(null as any);
    }

    /**
     * @param mentorId (optional) 
     * @return Success
     */
    mentor(mentorId: number | undefined): Promise<MentorDto> {
        let url_ = this.baseUrl + "/api/mentoring/mentor?";
        if (mentorId === null)
            throw new Error("The parameter 'mentorId' cannot be null.");
        else if (mentorId !== undefined)
            url_ += "mentorId=" + encodeURIComponent("" + mentorId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMentor(_response);
        });
    }

    protected processMentor(response: Response): Promise<MentorDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MentorDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MentorDto>(null as any);
    }

    /**
     * @return Success
     */
    pendingMenteesAll(): Promise<UserDto[]> {
        let url_ = this.baseUrl + "/api/mentoring/pending-mentees";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPendingMenteesAll(_response);
        });
    }

    protected processPendingMenteesAll(response: Response): Promise<UserDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDto[]>(null as any);
    }

    /**
     * @param menteeId (optional) 
     * @param isApproved (optional) 
     * @return Success
     */
    pendingMentees(menteeId: number | undefined, isApproved: boolean | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/mentoring/pending-mentees?";
        if (menteeId === null)
            throw new Error("The parameter 'menteeId' cannot be null.");
        else if (menteeId !== undefined)
            url_ += "menteeId=" + encodeURIComponent("" + menteeId) + "&";
        if (isApproved === null)
            throw new Error("The parameter 'isApproved' cannot be null.");
        else if (isApproved !== undefined)
            url_ += "isApproved=" + encodeURIComponent("" + isApproved) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPendingMentees(_response);
        });
    }

    protected processPendingMentees(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    profileInfoGET(userId: number): Promise<ProfileInfoDto> {
        let url_ = this.baseUrl + "/api/profile-info/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProfileInfoGET(_response);
        });
    }

    protected processProfileInfoGET(response: Response): Promise<ProfileInfoDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProfileInfoDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProfileInfoDto>(null as any);
    }

    /**
     * @param file (optional) 
     * @return Success
     */
    avatar(file: FileParameter | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/profile-info/avatar";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAvatar(_response);
        });
    }

    protected processAvatar(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    profileInfoPOST(body: ProfileUpdateValuesDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/profile-info";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProfileInfoPOST(_response);
        });
    }

    protected processProfileInfoPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param userId (optional) 
     * @return Success
     */
    user(userId: number | undefined): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/user?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUser(_response);
        });
    }

    protected processUser(response: Response): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDto>(null as any);
    }

    /**
     * @return Success
     */
    all(): Promise<UserDto[]> {
        let url_ = this.baseUrl + "/api/user/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAll(_response);
        });
    }

    protected processAll(response: Response): Promise<UserDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDto[]>(null as any);
    }
}

export enum ActivityStatus {
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class AnswerOption implements IAnswerOption {
    optionId?: number;
    option?: string | undefined;
    isCorrect?: boolean;

    constructor(data?: IAnswerOption) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.optionId = _data["optionId"];
            this.option = _data["option"];
            this.isCorrect = _data["isCorrect"];
        }
    }

    static fromJS(data: any): AnswerOption {
        data = typeof data === 'object' ? data : {};
        let result = new AnswerOption();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["optionId"] = this.optionId;
        data["option"] = this.option;
        data["isCorrect"] = this.isCorrect;
        return data;
    }
}

export interface IAnswerOption {
    optionId?: number;
    option?: string | undefined;
    isCorrect?: boolean;
}

export class ChangeUserRoleDto implements IChangeUserRoleDto {
    userId?: number;
    roleName?: string;

    constructor(data?: IChangeUserRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.roleName = _data["roleName"];
        }
    }

    static fromJS(data: any): ChangeUserRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeUserRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["roleName"] = this.roleName;
        return data;
    }
}

export interface IChangeUserRoleDto {
    userId?: number;
    roleName?: string;
}

export class KataBugFindingAnswerDto implements IKataBugFindingAnswerDto {
    kataId?: number;
    sourceCode?: string;

    constructor(data?: IKataBugFindingAnswerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.kataId = _data["kataId"];
            this.sourceCode = _data["sourceCode"];
        }
    }

    static fromJS(data: any): KataBugFindingAnswerDto {
        data = typeof data === 'object' ? data : {};
        let result = new KataBugFindingAnswerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kataId"] = this.kataId;
        data["sourceCode"] = this.sourceCode;
        return data;
    }
}

export interface IKataBugFindingAnswerDto {
    kataId?: number;
    sourceCode?: string;
}

export class KataBugFindingSolveResultDto implements IKataBugFindingSolveResultDto {
    isScheduled?: boolean;

    constructor(data?: IKataBugFindingSolveResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isScheduled = _data["isScheduled"];
        }
    }

    static fromJS(data: any): KataBugFindingSolveResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new KataBugFindingSolveResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isScheduled"] = this.isScheduled;
        return data;
    }
}

export interface IKataBugFindingSolveResultDto {
    isScheduled?: boolean;
}

export class KataCodeReadingAnswerDto implements IKataCodeReadingAnswerDto {
    kataId?: number;
    optionId?: number;

    constructor(data?: IKataCodeReadingAnswerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.kataId = _data["kataId"];
            this.optionId = _data["optionId"];
        }
    }

    static fromJS(data: any): KataCodeReadingAnswerDto {
        data = typeof data === 'object' ? data : {};
        let result = new KataCodeReadingAnswerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kataId"] = this.kataId;
        data["optionId"] = this.optionId;
        return data;
    }
}

export interface IKataCodeReadingAnswerDto {
    kataId?: number;
    optionId?: number;
}

export class KataCodeReadingSolveResultDto implements IKataCodeReadingSolveResultDto {
    isAnswerCorrect?: boolean;
    error?: string | undefined;
    pointsEarned?: number | undefined;

    constructor(data?: IKataCodeReadingSolveResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isAnswerCorrect = _data["isAnswerCorrect"];
            this.error = _data["error"];
            this.pointsEarned = _data["pointsEarned"];
        }
    }

    static fromJS(data: any): KataCodeReadingSolveResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new KataCodeReadingSolveResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isAnswerCorrect"] = this.isAnswerCorrect;
        data["error"] = this.error;
        data["pointsEarned"] = this.pointsEarned;
        return data;
    }
}

export interface IKataCodeReadingSolveResultDto {
    isAnswerCorrect?: boolean;
    error?: string | undefined;
    pointsEarned?: number | undefined;
}

export enum KataDifficulty {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _20 = 20,
}

export class KataDto implements IKataDto {
    id?: number;
    title?: string;
    programmingLanguage?: ProgrammingLanguage;
    kataDifficulty?: KataDifficulty;
    kataType?: KataType;
    kataJsonContent?: KataJsonContent;
    authorId?: number;
    memoryLimits?: { [key: string]: number; } | undefined;
    timeLimits?: { [key: string]: number; } | undefined;
    isKataResolved?: boolean;

    constructor(data?: IKataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.programmingLanguage = _data["programmingLanguage"];
            this.kataDifficulty = _data["kataDifficulty"];
            this.kataType = _data["kataType"];
            this.kataJsonContent = _data["kataJsonContent"] ? KataJsonContent.fromJS(_data["kataJsonContent"]) : <any>undefined;
            this.authorId = _data["authorId"];
            if (_data["memoryLimits"]) {
                this.memoryLimits = {} as any;
                for (let key in _data["memoryLimits"]) {
                    if (_data["memoryLimits"].hasOwnProperty(key))
                        (<any>this.memoryLimits)![key] = _data["memoryLimits"][key];
                }
            }
            if (_data["timeLimits"]) {
                this.timeLimits = {} as any;
                for (let key in _data["timeLimits"]) {
                    if (_data["timeLimits"].hasOwnProperty(key))
                        (<any>this.timeLimits)![key] = _data["timeLimits"][key];
                }
            }
            this.isKataResolved = _data["isKataResolved"];
        }
    }

    static fromJS(data: any): KataDto {
        data = typeof data === 'object' ? data : {};
        let result = new KataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["programmingLanguage"] = this.programmingLanguage;
        data["kataDifficulty"] = this.kataDifficulty;
        data["kataType"] = this.kataType;
        data["kataJsonContent"] = this.kataJsonContent ? this.kataJsonContent.toJSON() : <any>undefined;
        data["authorId"] = this.authorId;
        if (this.memoryLimits) {
            data["memoryLimits"] = {};
            for (let key in this.memoryLimits) {
                if (this.memoryLimits.hasOwnProperty(key))
                    (<any>data["memoryLimits"])[key] = (<any>this.memoryLimits)[key];
            }
        }
        if (this.timeLimits) {
            data["timeLimits"] = {};
            for (let key in this.timeLimits) {
                if (this.timeLimits.hasOwnProperty(key))
                    (<any>data["timeLimits"])[key] = (<any>this.timeLimits)[key];
            }
        }
        data["isKataResolved"] = this.isKataResolved;
        return data;
    }
}

export interface IKataDto {
    id?: number;
    title?: string;
    programmingLanguage?: ProgrammingLanguage;
    kataDifficulty?: KataDifficulty;
    kataType?: KataType;
    kataJsonContent?: KataJsonContent;
    authorId?: number;
    memoryLimits?: { [key: string]: number; } | undefined;
    timeLimits?: { [key: string]: number; } | undefined;
    isKataResolved?: boolean;
}

export class KataJsonContent implements IKataJsonContent {
    kataDescription?: string | undefined;
    sourceCode?: string | undefined;
    answerOptions?: AnswerOption[] | undefined;

    constructor(data?: IKataJsonContent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.kataDescription = _data["kataDescription"];
            this.sourceCode = _data["sourceCode"];
            if (Array.isArray(_data["answerOptions"])) {
                this.answerOptions = [] as any;
                for (let item of _data["answerOptions"])
                    this.answerOptions!.push(AnswerOption.fromJS(item));
            }
        }
    }

    static fromJS(data: any): KataJsonContent {
        data = typeof data === 'object' ? data : {};
        let result = new KataJsonContent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kataDescription"] = this.kataDescription;
        data["sourceCode"] = this.sourceCode;
        if (Array.isArray(this.answerOptions)) {
            data["answerOptions"] = [];
            for (let item of this.answerOptions)
                data["answerOptions"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IKataJsonContent {
    kataDescription?: string | undefined;
    sourceCode?: string | undefined;
    answerOptions?: AnswerOption[] | undefined;
}

export enum KataType {
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class LeaderboardPositionDto implements ILeaderboardPositionDto {
    userId?: number;
    username?: string;
    rank?: Rank;
    rating?: number;

    constructor(data?: ILeaderboardPositionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.username = _data["username"];
            this.rank = _data["rank"];
            this.rating = _data["rating"];
        }
    }

    static fromJS(data: any): LeaderboardPositionDto {
        data = typeof data === 'object' ? data : {};
        let result = new LeaderboardPositionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["username"] = this.username;
        data["rank"] = this.rank;
        data["rating"] = this.rating;
        return data;
    }
}

export interface ILeaderboardPositionDto {
    userId?: number;
    username?: string;
    rank?: Rank;
    rating?: number;
}

export class LoginDto implements ILoginDto {
    username?: string;
    password?: string;

    constructor(data?: ILoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginDto {
    username?: string;
    password?: string;
}

export enum MentorAvailability {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export class MentorDto implements IMentorDto {
    id?: number | undefined;
    userId?: number;
    experience?: number;
    programmingLanguages?: ProgrammingLanguage[];
    availability?: MentorAvailability;
    about?: string;
    rating?: number;

    constructor(data?: IMentorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.experience = _data["experience"];
            if (Array.isArray(_data["programmingLanguages"])) {
                this.programmingLanguages = [] as any;
                for (let item of _data["programmingLanguages"])
                    this.programmingLanguages!.push(item);
            }
            this.availability = _data["availability"];
            this.about = _data["about"];
            this.rating = _data["rating"];
        }
    }

    static fromJS(data: any): MentorDto {
        data = typeof data === 'object' ? data : {};
        let result = new MentorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["experience"] = this.experience;
        if (Array.isArray(this.programmingLanguages)) {
            data["programmingLanguages"] = [];
            for (let item of this.programmingLanguages)
                data["programmingLanguages"].push(item);
        }
        data["availability"] = this.availability;
        data["about"] = this.about;
        data["rating"] = this.rating;
        return data;
    }
}

export interface IMentorDto {
    id?: number | undefined;
    userId?: number;
    experience?: number;
    programmingLanguages?: ProgrammingLanguage[];
    availability?: MentorAvailability;
    about?: string;
    rating?: number;
}

export class ProfileInfoDto implements IProfileInfoDto {
    username?: string;
    avatarUrl?: string | undefined;
    description?: string | undefined;
    activityStatus?: ActivityStatus;
    userId?: number;

    constructor(data?: IProfileInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.avatarUrl = _data["avatarUrl"];
            this.description = _data["description"];
            this.activityStatus = _data["activityStatus"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): ProfileInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["avatarUrl"] = this.avatarUrl;
        data["description"] = this.description;
        data["activityStatus"] = this.activityStatus;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IProfileInfoDto {
    username?: string;
    avatarUrl?: string | undefined;
    description?: string | undefined;
    activityStatus?: ActivityStatus;
    userId?: number;
}

export class ProfileUpdateValuesDto implements IProfileUpdateValuesDto {
    userId?: number;
    username?: string | undefined;
    newPassword?: string | undefined;
    confirmCurrentPassword?: string | undefined;
    description?: string | undefined;

    constructor(data?: IProfileUpdateValuesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.username = _data["username"];
            this.newPassword = _data["newPassword"];
            this.confirmCurrentPassword = _data["confirmCurrentPassword"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): ProfileUpdateValuesDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileUpdateValuesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["username"] = this.username;
        data["newPassword"] = this.newPassword;
        data["confirmCurrentPassword"] = this.confirmCurrentPassword;
        data["description"] = this.description;
        return data;
    }
}

export interface IProfileUpdateValuesDto {
    userId?: number;
    username?: string | undefined;
    newPassword?: string | undefined;
    confirmCurrentPassword?: string | undefined;
    description?: string | undefined;
}

export enum ProgrammingLanguage {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export enum Rank {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _20 = 20,
}

export class RegisterDto implements IRegisterDto {
    email?: string;
    username?: string;
    password?: string;

    constructor(data?: IRegisterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterDto {
    email?: string;
    username?: string;
    password?: string;
}

export class ResolvedKataDto implements IResolvedKataDto {
    kataId?: number;
    resolvedUserId?: number;
    pointEarned?: number;
    sourceCode?: string | undefined;
    selectedOptionId?: number | undefined;
    executionOutput?: string | undefined;

    constructor(data?: IResolvedKataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.kataId = _data["kataId"];
            this.resolvedUserId = _data["resolvedUserId"];
            this.pointEarned = _data["pointEarned"];
            this.sourceCode = _data["sourceCode"];
            this.selectedOptionId = _data["selectedOptionId"];
            this.executionOutput = _data["executionOutput"];
        }
    }

    static fromJS(data: any): ResolvedKataDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResolvedKataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kataId"] = this.kataId;
        data["resolvedUserId"] = this.resolvedUserId;
        data["pointEarned"] = this.pointEarned;
        data["sourceCode"] = this.sourceCode;
        data["selectedOptionId"] = this.selectedOptionId;
        data["executionOutput"] = this.executionOutput;
        return data;
    }
}

export interface IResolvedKataDto {
    kataId?: number;
    resolvedUserId?: number;
    pointEarned?: number;
    sourceCode?: string | undefined;
    selectedOptionId?: number | undefined;
    executionOutput?: string | undefined;
}

export class TokenDto implements ITokenDto {
    accessToken?: string | undefined;
    userId?: number | undefined;

    constructor(data?: ITokenDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): TokenDto {
        data = typeof data === 'object' ? data : {};
        let result = new TokenDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["userId"] = this.userId;
        return data;
    }
}

export interface ITokenDto {
    accessToken?: string | undefined;
    userId?: number | undefined;
}

export class UserDto implements IUserDto {
    id?: number;
    username?: string;
    password?: string;
    email?: string;
    registrationDate?: Date;
    rank?: Rank;
    rating?: number;
    gitHubProfileId?: number | undefined;
    userProfileId?: number | undefined;
    roleId?: number | undefined;
    mentorId?: number | undefined;
    isBanned?: boolean;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.registrationDate = _data["registrationDate"] ? new Date(_data["registrationDate"].toString()) : <any>undefined;
            this.rank = _data["rank"];
            this.rating = _data["rating"];
            this.gitHubProfileId = _data["gitHubProfileId"];
            this.userProfileId = _data["userProfileId"];
            this.roleId = _data["roleId"];
            this.mentorId = _data["mentorId"];
            this.isBanned = _data["isBanned"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["password"] = this.password;
        data["email"] = this.email;
        data["registrationDate"] = this.registrationDate ? this.registrationDate.toISOString() : <any>undefined;
        data["rank"] = this.rank;
        data["rating"] = this.rating;
        data["gitHubProfileId"] = this.gitHubProfileId;
        data["userProfileId"] = this.userProfileId;
        data["roleId"] = this.roleId;
        data["mentorId"] = this.mentorId;
        data["isBanned"] = this.isBanned;
        return data;
    }
}

export interface IUserDto {
    id?: number;
    username?: string;
    password?: string;
    email?: string;
    registrationDate?: Date;
    rank?: Rank;
    rating?: number;
    gitHubProfileId?: number | undefined;
    userProfileId?: number | undefined;
    roleId?: number | undefined;
    mentorId?: number | undefined;
    isBanned?: boolean;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}